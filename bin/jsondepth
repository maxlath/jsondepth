#!/usr/bin/env node
const { program } = require('commander')
const { version, description } = require('../package.json')
const { append, Log } = require('../lib/aggregator')

program
.version(version)
.description(description)
.arguments('[file-path] [json-path] [depth]')
.option('-j, --json [number]', 'Format output as JSON. Pass a number as argument to set the indentation (default: 2)')
.option('-l, --line', 'Parse the input line by line')
.parse(process.argv)

const { json, line: lineByLine } = program.opts()
const formatAsJson = json != null
let jsonIndentation = json || '2'
jsonIndentation = parseInt(jsonIndentation.replace(/^=/, ''))

const { file, jsonPath, depth } = require('../lib/parse_arguments')(program)
const log = Log(jsonPath, depth, formatAsJson, jsonIndentation)

if (file) {
  log(file)
} else if (lineByLine) {
  const split = require('split')
  process.stdin
  .pipe(split())
  .on('data', line => {
    line = line.replace(/,$/, '')
    const isValidJsonLine = line[0] === '{' || line.slice(-1)[0] === '}'
    if (isValidJsonLine) log(line)
  })
} else {
  process.stdin
  .on('data', append)
  .on('end', log)
}

// Prevent logging an EPIPE error when piping the output
// cf https://github.com/maxlath/wikidata-cli/issues/7
process.stdout.on('error', err => {
  if (err.code !== 'EPIPE') throw err
})
