#!/usr/bin/env node
const inspect = require('util').inspect
const jsonOptionRegex = /(--json|-j)(=(\d{1}))?/
const getValue = require('../lib/get_value')

var args = process.argv.slice(2)
const argsString = args.join(' ')
const jsonOptionRegexMatch = argsString.match(jsonOptionRegex)
const formatAsJson = jsonOptionRegexMatch != null
if (formatAsJson) {
  // Look for an indentation parameter
  var jsonIndentation = /\d{1}/.test(jsonOptionRegexMatch[3]) && parseInt(jsonOptionRegexMatch[3])
  // or default to an indentation level of 2
  if (!(jsonIndentation || jsonIndentation === 0)) jsonIndentation = 2
}

// Recovering an args arry without the json option
args = argsString.replace(jsonOptionRegex, '').trim().split(' ')

if (args.length === 2) {
  var path = args[0]
  var depth = parseInt(args[1])
} else if (args.length === 1) {
  if (/^-?\d+$/.test(args[0])) {
    var path = ''
    var depth = parseInt(args[0])
  } else {
    var path = args[0]
    var depth = 0
  }
} else if (args.length === 0) {
  var path = ''
  var depth = 0
} else {
  throw new Error('too many arguments')
}

var data = ''

function append (buf) { data += buf.toString() }

function log () {
  try {
    var obj = JSON.parse(data)
  } catch (error) {
    console.error("couldn't parse JSON", error)
    process.exit(1)
  }

  var obj = getValue(obj, path)

  if (typeof obj === 'string') {
    // avoid using util.inspect on strings as it keeps the quotes
    console.log(obj)
  } else if (formatAsJson) {
    console.log(JSON.stringify(obj, null, jsonIndentation))
  } else {
    // avoid colorizing when stdout isn't the terminal
    var colors = process.stdout.isTTY
    if (depth === -1) depth = Infinity
    // util.inspect doc: https://nodejs.org/api/util.html#util_util_inspect_object_options
    console.log(inspect(obj, { depth: depth, colors: colors, maxArrayLength: null }))
  }
  process.exit(0)
}

process.stdin
.on('data', append)
.on('end', log)
